/**
 * Comprehensive test suite for the Lyn programming language
 * This file contains various tests demonstrating the language's features including:
 * - Variables and type system
 * - Control flow structures
 * - Functions and aspects
 * - Classes and objects
 * - Loops and iterations
 * - Switch statements
 */

main
    // ===================================================================
    // Variables and Type Tests
    // ===================================================================
    
    // Basic variable assignments
    integer = 42               // Integer value
    decimal = 3.14            // Floating point value
    text = "Hello, Lyn!"      // String value
    
    // Print variable values
    print("\n=== Variables and their values ===")
    print("integer = " + integer)
    print("decimal = " + decimal)
    print("text = " + text)

    // Remove or comment out the unused sayHello function to avoid the warning
    // func sayHello()
    //     print("Hello from sayHello function!")
    // end
    
    // ===================================================================
    // Type System Tests
    // ===================================================================
    
    print("\n=== Type System Tests ===")
    
    // Type inference tests
    print("\n--- Type Inference ---")
    
    // Explicit type declarations
    explicit_int: int = 42
    explicit_float: float = 3.14
    
    // Inferred types
    inferred_int = 100        // Should infer as int
    inferred_float = 2.718    // Should infer as float
    inferred_string = "Hello type system"  // Should infer as string
    
    print("Values with explicit types:")
    print("explicit_int: " + explicit_int)
    print("explicit_float: " + explicit_float)
    
    print("Values with inferred types:")
    print("inferred_int: " + inferred_int)
    print("inferred_float: " + inferred_float)
    print("inferred_string: " + inferred_string)
    
    // Type compatibility tests
    print("\n--- Type Compatibility ---")
    
    // Valid assignments (compatible types)
    int_to_int = integer       // int to int (same type)
    int_to_float = integer     // int to float (int can be assigned to float)
    
    print("int_to_int: " + int_to_int)
    print("int_to_float: " + int_to_float)
    
    // Mixed type operations
    print("\n--- Mixed Type Operations ---")
    
    // Integer operations
    sum_int = integer + 10
    print("integer + 10 = " + sum_int)
    
    // Float operations
    product_float = decimal * 2
    print("decimal * 2 = " + product_float)
    
    // Mixed int and float (should promote to float)
    mixed_result = integer + decimal
    print("integer + decimal = " + mixed_result)
    
    // Simple variables without string concatenation
    greeting = "Hello World"  // Direct string assignment without concatenation
    message = "The answer is 42"
    
    print("String value: " + greeting)
    
    // Integer concatenation with strings
    num = 42
    message = "The answer is: " + num
    print(message)
    
    // ===================================================================
    // Function Type Tests
    // ===================================================================
    
    print("\n=== Function Type Tests ===")
    
    // Function with explicit return type - simplified
    func add(a: int, b: int) -> int
        return a + b;
    end
    
    // Function that works with strings - simplified
    func greet(name: string) -> string
        return "Hello, " + name;  // Keep the full greeting
    end
    
    // Test function calls with correct argument types
    sum_result = add(5, 3)
    print("add(5, 3) = " + sum_result)
    
    greeting_result = greet("World")
    print("greet result: " + greeting_result)
    
    // ===================================================================
    // Arithmetic Operations
    // ===================================================================
    
    print("\n=== Arithmetic operations ===")
    
    // Addition
    sum = 5 + 3
    print("5 + 3 = " + sum)
    
    // Subtraction
    subtraction = 10 - 4
    print("10 - 4 = " + subtraction)
    
    // Multiplication
    product = 3 * 7
    print("3 * 7 = " + product)
    
    // Division
    division = 20 / 4
    print("20 / 4 = " + division)
    
    // ===================================================================
    // Control Flow
    // ===================================================================
    
    print("\n=== Control flow statements ===")
    
    // If-else statement
    value = 42
    
    if (value > 10)
        print("value is greater than 10")
    else
        print("value is less than or equal to 10")
    end
    
    // Another if-else with a different condition
    age = 25
    if (age >= 18)
        print("You are an adult")
    else
        print("You are not yet an adult")
    end
    
    // ===================================================================
    // While Loop Test
    // ===================================================================
    
    print("\n=== While loop test ===")
    
    count = 1
    print("Counting from 1 to 5 using while:")
    
    while (count <= 5)
        print(count)
        count = count + 1
    end
    
    // ===================================================================
    // Do-While Loop Test
    // ===================================================================
    
    print("\n=== Do-While loop test ===")
    
    do_while_count = 1
    print("Counting from 1 to 5 using do-while:")
    
    do
        print(do_while_count)
        do_while_count = do_while_count + 1
    while (do_while_count <= 5)
    end
    
    // ===================================================================
    // Aspect-Oriented Programming Test
    // ===================================================================
    
    print("\n=== Simple aspect test ===")
    
    // Define a simple aspect
    aspect LoggingAspect
        // Define a pointcut for functions to log
        pointcut loggedFunctions "test_*"
        
        // Before advice to print message before function execution
        advice before loggedFunctions
            print("Before executing function")
        end
        
        // After advice to print message after function execution
        advice after loggedFunctions
            print("After executing function")
        end
    end
    
    // Define a function that will be advised by the aspect
    func test_function()
        print("Inside test_function")
    end
    
    // Explicitly call the function to activate the aspect
    print("Calling advised function:")
    test_function()  // Make sure this is actually calling the function
    
    // ===================================================================
    // Class and Object Test
    // ===================================================================
    
    print("\n=== Class and Object Test ===")
    
    class Car
        brand = "Toyota"
        print("Creating a Car with brand = " + brand)
    end

    var myCar = new Car()
    print("Car instance created.")
    print("My car brand is: " + myCar.brand)  // Use myCar to prevent unused warning
    
    // ===================================================================
    // Additional Type System Tests
    // ===================================================================
    
    print("\n=== Advanced Type System Tests ===")
    
    // Boolean operations
    bool_val1 = true
    bool_val2 = false
    
    bool_and = bool_val1 and bool_val2
    print("true and false = " + bool_and)
    
    bool_or = bool_val1 or bool_val2
    print("true or false = " + bool_or)
    
    // Comparison operations (returning boolean)
    is_greater = 10 > 5
    print("10 > 5 = " + is_greater)
    
    is_equal = 7 == 7
    print("7 == 7 = " + is_equal)
    
    // Type conversions
    int_val = 42
    float_val = 3.14
    
    // Automatic conversion from int to float in mixed expression
    mixed_expr = int_val + float_val
    print("int_val + float_val = " + mixed_expr)
    
    // String concatenation with numeric conversion
    str_numeric = "The answer is: " + int_val
    print(str_numeric)
    
    print("\n=== Test completed successfully! ===")
    
    // Switch statements tests
    print("===== Switch Statements Tests =====")

    // Test 1: Basic switch
    x1 = 2
    result1 = "unknown"
    switch (x1) 
        case 1:
            result1 = "one"
            break
        case 2:
            result1 = "two"
            break
        case 3:
            result1 = "three"
            break
    end
    
    print("Test 1: " + result1)
    
    // Test 2: Switch with default case
    x2 = 10
    result2 = "unknown"
    switch (x2) 
        case 1:
            result2 = "one"
            break
        case 2:
            result2 = "two"
            break
        default:
            result2 = "other"
    end
    
    print("Test 2: " + result2)
    
    // Test 3: Fall-through behavior (when no break)
    x3 = 1
    result3 = ""
    switch (x3) 
        case 1:
            result3 = result3 + "one, "
            // No break, should continue to next case
        case 2:
            result3 = result3 + "two, "
            // No break, should continue to next case
        case 3:
            result3 = result3 + "three"
            break
        default:
            result3 = "other"
    end
    
    print("Test 3: " + result3)
    
    // Test 4: Expressions in switch
    a = 5
    b = 10
    result4 = ""
    
    switch (a * 2)
        case 10:
            result4 = "a*2 equals b"
            break
        case 9:
            result4 = "a*2 equals b-1"
            break
        case 11:
            result4 = "a*2 equals b+1"
            break
        default:
            result4 = "no match"
    end
    
    print("Test 4: " + result4)
    
    // Test 5: Nested switch
    outer = 1
    inner = 2
    result5 = ""
    
    switch (outer) 
        case 1:
            result5 = result5 + "outer:1, "
            
            switch (inner) 
                case 1:
                    result5 = result5 + "inner:1"
                    break
                case 2:
                    result5 = result5 + "inner:2"
                    break
                default:
                    result5 = result5 + "inner:other"
            end
            
            break
        case 2:
            result5 = "outer:2"
            break
        default:
            result5 = "outer:other"
    end
    
    print("Test 5: " + result5)
    
    // Test 6: Switch with early break
    x6 = 2
    result6 = ""
    ran_after_break = false
    
    switch (x6) 
        case 2:
            result6 = "case 2"
            break
            ran_after_break = true // This should not execute
        case 3:
            result6 = "case 3"
            break
    end
    
    print("Test 6: " + result6)
    
    // Test 7: Switch with calculated values in cases
    x7 = 15
    a7 = 5
    b7 = 10
    result7 = ""
    
    switch (x7)
        case 15:
            result7 = "equals a+b"
            break
        case 50:
            result7 = "equals a*b"
            break
        case 5:
            result7 = "equals b-a"
            break
        default:
            result7 = "no match"
    end
    
    print("Test 7: " + result7)
    
    // Test 8: Switch with empty case (nothing happens)
    x8 = 3
    result8 = "initial"
    
    switch (x8) 
        case 1:
            result8 = "one"
            break
        case 2:
            result8 = "two"
            break
        case 3:
            // Intentional empty case, does nothing
            break
        default:
            result8 = "other"
    end
    
    print("Test 8: " + result8)

    print("===== All Switch Tests Completed =====")
    
    print("Random message: Remember to check the Lyn documentation!")
end

/**
 * Tests for different types of for loops
 * Demonstrates various for loop syntaxes and use cases
 */
main
    print("=== Extended For Loop Tests ===")
    
    // Test 1: Basic range for loop
    print("Test 1: For with basic range")
    for i in range(1, 6)
        print(i)
    end
    
    // Test 2: For loop with range and step
    print("Test 2: For with range and step")
    for i in range(0, 10, 2)
        print(i)
    end
    
    // Test 3: For loop with collection (array)
    print("Test 3: For with collection")
    numbers = [10, 20, 30, 40, 50]
    for num in numbers
        print(num)
    end
    
    // Test 4: Traditional C-style for loop
    print("Test 4: Traditional C-style for")
    for (i = 0; i < 5; i = i + 1)
        print(i)
    end
    
    // Test 5: Traditional for loop with multiple operations
    print("Test 5: Traditional for with multiple operations")
    for (i = 0, sum = 0; i < 5; i = i + 1, sum = sum + i)
        print("Iteration " + i + ", sum = " + sum)
    end
    
    // Test 6: Nested for loops
    print("Test 6: Nested for loops")
    for i in range(1, 4)
        for j in range(1, 4)
            print("i = " + i + ", j = " + j)
        end
    end
    
    // Test 7: For loop with string collection
    print("Test 7: For with string collection")
    names = ["Ana", "Luis", "Maria", "Carlos"]
    for name in names
        print("Hello, " + name)
    end
    
    // Test 8: Traditional for with optional parts
    print("Test 8: Traditional for with condition only")
    j = 0
    for (; j < 3; j = j + 1)
        print("j = " + j)
    end
    
    print("For loop tests completed")
end