main
    // Primera clase: Point
    class Point
        x: float;
        y: float;
        
        func init(self: Point, x: float, y: float) -> void
            self.x = x;
            self.y = y;
        end
        
        func distance(self: Point, other: Point) -> float
            dx = self.x - other.x;
            dy = self.y - other.y;
            return sqrt(dx * dx + dy * dy);
        end
    end
    
    // Segunda clase: Vector3
    class Vector3
        x: float;
        y: float;
        z: float;
        
        func init(self: Vector3, x: float, y: float, z: float) -> void
            self.x = x;
            self.y = y;
            self.z = z;
        end
        
        func magnitude(self: Vector3) -> float
            return sqrt(self.x * self.x + self.y * self.y + self.z * self.z);
        end
        
        func add(self: Vector3, other: Vector3) -> Vector3
            result = new_Vector3();
            Vector3_init(result, self.x + other.x, self.y + other.y, self.z + other.z);
            return result;
        end
    end
    
    // Tercera clase: Shape y Circle (herencia)
    class Shape
        x: float;
        y: float;
        
        func init(self: Shape, x: float, y: float) -> void
            self.x = x;
            self.y = y;
        end
        
        func area(self: Shape) -> float
            return 0.0;
        end
    end
    
    class Circle : Shape
        radius: float;
        
        func init(self: Circle, x: float, y: float, r: float) -> void
            Shape_init(self, x, y);  // Llamada al constructor padre
            self.radius = r;
        end
        
        func area(self: Circle) -> float
            return 3.14159 * self.radius * self.radius;
        end
        
        func scale(self: Circle, factor: float) -> void
            self.radius = self.radius * factor;
        end
    end
    
    // Test del sistema de tipos con inferencia
    
    // Variables con tipos explícitos e inferidos
    print("=== Testing Type System ===");
    
    // Variables con tipos explícitos
    explicit_int: int = 42;
    explicit_float: float = 3.14;
    
    // Variables con tipos inferidos
    inferred_int = 100;       // Debe ser inferido como int
    inferred_float = 2.718;   // Debe ser inferido como float
    inferred_string = "Hello type system";  // Debe ser inferido como string
    
    // Asignaciones y compatibilidad de tipos
    inferred_int = explicit_int;    // OK - mismo tipo
    explicit_float = inferred_int;  // OK - promoción de int a float
    
    // Test de operaciones binarias y promoción de tipos
    sum = explicit_int + explicit_float;  // Debe ser float
    product = inferred_int * 2.5;         // Debe ser float
    
    // Test de objetos y tipos de clases
    print("=== Testing Object Types ===");
    p1 = new_Point();
    Point_init(p1, 0, 0);
    p2 = new_Point();
    Point_init(p2, 3, 4);
    print(Point_distance(p1, p2));  // Debería imprimir 5.0
    
    v1 = new_Vector3();
    Vector3_init(v1, 1, 2, 2);
    print(Vector3_magnitude(v1));  // Debería imprimir 3.0
    
    // Test de herencia y polimorfismo
    print("=== Testing Inheritance ===");
    c1 = new_Circle();
    Circle_init(c1, 0, 0, 5);
    print(Circle_area(c1));    // Debería imprimir ~78.54
    
    // Test de conversión entre tipos primitivos
    int_val = 10;
    float_val = 20.5;
    sum_val = int_val + float_val;  // float (30.5)
    print(sum_val);
    
    // Test de arrays con tipos consistentes
    print("=== Testing Array Types ===");
    int_array = [1, 2, 3, 4, 5];  // Array de ints
    float_array = [1.1, 2.2, 3.3, 4.4]; // Array de floats
    mixed_array = [1, 2.5, 3, 4.5]; // Array mixto (se convierte a float)
    
    // Test de comprobación de tipos en las llamadas a funciones
    print("=== Testing Function Call Types ===");
    Vector3_init(v1, 1, 2, 3);  // Correcto
    
    // Test Circle con herencia
    print("=== Testing Circle Inheritance ===");
    Circle_scale(c1, 2);
    print(Circle_area(c1));    // Debería imprimir ~314.16
end