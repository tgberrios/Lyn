main
    // ===================================================================
    // Variables and Type Tests
    // ===================================================================
    
    // Basic variable assignments
    entero = 42               // Integer value
    decimal = 3.14            // Floating point value
    texto = "Hola, Lyn!"      // String value
    
    // Print variable values
    print("\n=== Variables and their values ===")
    print("entero = " + entero)
    print("decimal = " + decimal)
    print("texto = " + texto)

    // Remove or comment out the unused sayHello function to avoid the warning
    // func sayHello()
    //     print("Hello from sayHello function!")
    // end
    
    // ===================================================================
    // Type System Tests
    // ===================================================================
    
    print("\n=== Type System Tests ===")
    
    // Type inference tests
    print("\n--- Type Inference ---")
    
    // Explicit type declarations
    explicit_int: int = 42
    explicit_float: float = 3.14
    
    // Inferred types
    inferred_int = 100        // Should infer as int
    inferred_float = 2.718    // Should infer as float
    inferred_string = "Hello type system"  // Should infer as string
    
    print("Values with explicit types:")
    print("explicit_int: " + explicit_int)
    print("explicit_float: " + explicit_float)
    
    print("Values with inferred types:")
    print("inferred_int: " + inferred_int)
    print("inferred_float: " + inferred_float)
    print("inferred_string: " + inferred_string)
    
    // Type compatibility tests
    print("\n--- Type Compatibility ---")
    
    // Valid assignments (compatible types)
    int_to_int = entero       // int to int (same type)
    int_to_float = entero     // int to float (int can be assigned to float)
    
    print("int_to_int: " + int_to_int)
    print("int_to_float: " + int_to_float)
    
    // Mixed type operations
    print("\n--- Mixed Type Operations ---")
    
    // Integer operations
    sum_int = entero + 10
    print("entero + 10 = " + sum_int)
    
    // Float operations
    product_float = decimal * 2
    print("decimal * 2 = " + product_float)
    
    // Mixed int and float (should promote to float)
    mixed_result = entero + decimal
    print("entero + decimal = " + mixed_result)
    
    // Simple variables without string concatenation
    greeting = "Hello World"  // Direct string assignment without concatenation
    message = "The answer is 42"
    
    print("String value: " + greeting)
    
    // Integer concatenation with strings
    num = 42
    message = "The answer is: " + num
    print(message)
    
    // ===================================================================
    // Function Type Tests
    // ===================================================================
    
    print("\n=== Function Type Tests ===")
    
    // Function with explicit return type - simplified
    func add(a: int, b: int) -> int
        return a + b;
    end
    
    // Function that works with strings - simplified
    func greet(name: string) -> string
        return "Hello, " + name;  // Keep the full greeting
    end
    
    // Test function calls with correct argument types
    sum_result = add(5, 3)
    print("add(5, 3) = " + sum_result)
    
    greeting_result = greet("World")
    print("greet result: " + greeting_result)
    
    // ===================================================================
    // Arithmetic Operations
    // ===================================================================
    
    print("\n=== Arithmetic operations ===")
    
    // Addition
    suma = 5 + 3
    print("5 + 3 = " + suma)
    
    // Subtraction
    resta = 10 - 4
    print("10 - 4 = " + resta)
    
    // Multiplication
    producto = 3 * 7
    print("3 * 7 = " + producto)
    
    // Division
    division = 20 / 4
    print("20 / 4 = " + division)
    
    // ===================================================================
    // Control Flow
    // ===================================================================
    
    print("\n=== Control flow statements ===")
    
    // If-else statement
    valor = 42
    
    if (valor > 10)
        print("valor is greater than 10")
    else
        print("valor is less than or equal to 10")
    end
    
    // Another if-else with a different condition
    edad = 25
    if (edad >= 18)
        print("You are an adult")
    else
        print("You are not yet an adult")
    end
    
    // ===================================================================
    // While Loop Test
    // ===================================================================
    
    print("\n=== While loop test ===")
    
    count = 1
    print("Counting from 1 to 5 using while:")
    
    while (count <= 5)
        print(count)
        count = count + 1
    end
    
    // ===================================================================
    // Do-While Loop Test
    // ===================================================================
    
    print("\n=== Do-While loop test ===")
    
    do_while_count = 1
    print("Counting from 1 to 5 using do-while:")
    
    do
        print(do_while_count)
        do_while_count = do_while_count + 1
    while (do_while_count <= 5)
    end
    
    // ===================================================================
    // Aspect-Oriented Programming Test
    // ===================================================================
    
    print("\n=== Simple aspect test ===")
    
    // Define a simple aspect
    aspect LoggingAspect
        // Define a pointcut for functions to log
        pointcut loggedFunctions "test_*"
        
        // Before advice to print message before function execution
        advice before loggedFunctions
            print("Before executing function")
        end
        
        // After advice to print message after function execution
        advice after loggedFunctions
            print("After executing function")
        end
    end
    
    // Define a function that will be advised by the aspect
    func test_function()
        print("Inside test_function")
    end
    
    // Explicitly call the function to activate the aspect
    print("Calling advised function:")
    test_function()  // Make sure this is actually calling the function
    
    // ===================================================================
    // Class and Object Test
    // ===================================================================
    
    print("\n=== Class and Object Test ===")
    
    class Car
        brand = "Toyota"
        print("Creating a Car with brand = " + brand)
    end

    var myCar = new Car()
    print("Car instance created.")
    print("My car brand is: " + myCar.brand)  // Use myCar to prevent unused warning
    
    // ===================================================================
    // Additional Type System Tests
    // ===================================================================
    
    print("\n=== Advanced Type System Tests ===")
    
    // Boolean operations
    bool_val1 = true
    bool_val2 = false
    
    bool_and = bool_val1 and bool_val2
    print("true and false = " + bool_and)
    
    bool_or = bool_val1 or bool_val2
    print("true or false = " + bool_or)
    
    // Comparison operations (returning boolean)
    is_greater = 10 > 5
    print("10 > 5 = " + is_greater)
    
    is_equal = 7 == 7
    print("7 == 7 = " + is_equal)
    
    // Type conversions
    int_val = 42
    float_val = 3.14
    
    // Automatic conversion from int to float in mixed expression
    mixed_expr = int_val + float_val
    print("int_val + float_val = " + mixed_expr)
    
    // String concatenation with numeric conversion
    str_numeric = "The answer is: " + int_val
    print(str_numeric)
    
    print("\n=== Test completed successfully! ===")
    
    // Test de switch statements
    print("===== Test de Switch Statements =====")

    // Test 1: Switch básico
    x1 = 2
    result1 = "desconocido"
    switch (x1) 
        case 1:
            result1 = "uno"
            break
        case 2:
            result1 = "dos"
            break
        case 3:
            result1 = "tres"
            break
    end
    
    print("Test 1: " + result1)
    
    // Test 2: Switch con caso default
    x2 = 10
    result2 = "desconocido"
    switch (x2) 
        case 1:
            result2 = "uno"
            break
        case 2:
            result2 = "dos"
            break
        default:
            result2 = "otro"
    end
    
    print("Test 2: " + result2)
    
    // Test 3: Comportamiento de fall-through (cuando no hay break)
    x3 = 1
    result3 = ""
    switch (x3) 
        case 1:
            result3 = result3 + "uno, "
            // Sin break, debería continuar al siguiente caso
        case 2:
            result3 = result3 + "dos, "
            // Sin break, debería continuar al siguiente caso
        case 3:
            result3 = result3 + "tres"
            break
        default:
            result3 = "otro"
    end
    
    print("Test 3: " + result3)
    
    // Test 4: Expresiones en switch
    // Originalmente se usaba:
    // a = 5, b = 10, switch (a*2) con case b, b-1 y b+1
    // Se reemplaza usando literales: a*2 es 10, b-1=9 y b+1=11
    a = 5
    b = 10
    result4 = ""
    
    switch (a * 2)
        case 10:
            result4 = "a*2 es igual a b"
            break
        case 9:
            result4 = "a*2 es igual a b-1"
            break
        case 11:
            result4 = "a*2 es igual a b+1"
            break
        default:
            result4 = "ninguna coincidencia"
    end
    
    print("Test 4: " + result4)
    
    // Test 5: Switch anidado
    outer = 1
    inner = 2
    result5 = ""
    
    switch (outer) 
        case 1:
            result5 = result5 + "outer:1, "
            
            switch (inner) 
                case 1:
                    result5 = result5 + "inner:1"
                    break
                case 2:
                    result5 = result5 + "inner:2"
                    break
                default:
                    result5 = result5 + "inner:otro"
            end
            
            break
        case 2:
            result5 = "outer:2"
            break
        default:
            result5 = "outer:otro"
    end
    
    print("Test 5: " + result5)
    
    // Test 6: Switch con break temprano
    x6 = 2
    result6 = ""
    ran_after_break = false
    
    switch (x6) 
        case 2:
            result6 = "caso 2"
            break
            ran_after_break = true // Esto no debería ejecutarse
        case 3:
            result6 = "caso 3"
            break
    end
    
    // Replace problematic line with a simple print statement
    print("Test 6: " + result6)
    
    // Test 7: Switch con valores calculados en los casos
    // Con a7 = 5 y b7 = 10, se reemplazan:
    // a7+b7 = 15, a7*b7 = 50, b7-a7 = 5
    x7 = 15
    a7 = 5
    b7 = 10
    result7 = ""
    
    switch (x7)
        case 15:
            result7 = "igual a a+b"
            break
        case 50:
            result7 = "igual a a*b"
            break
        case 5:
            result7 = "igual a b-a"
            break
        default:
            result7 = "sin coincidencia"
    end
    
    print("Test 7: " + result7)
    
    // Test 8: Switch con caso vacío (no ocurre nada)
    x8 = 3
    result8 = "inicial"
    
    switch (x8) 
        case 1:
            result8 = "uno"
            break
        case 2:
            result8 = "dos"
            break
        case 3:
            // Caso vacío intencional, no hace nada
            break
        default:
            result8 = "otro"
    end
    
    print("Test 8: " + result8)

    print("===== Todos los tests de Switch completados =====")
    
    print("Mensaje random: ¡Recuerda revisar la documentación de Lyn!")
end

// Tests para los diferentes tipos de bucles for
main
    print("=== Tests de bucles for ampliados ===")
    
    // Test 1: Bucle for con range básico
    print("Test 1: For con range básico")
    for i in range(1, 6)
        print(i)
    end
    
    // Test 2: Bucle for con range y paso
    print("Test 2: For con range y paso")
    for i in range(0, 10, 2)
        print(i)
    end
    
    // Test 3: Bucle for con colección (array)
    print("Test 3: For con colección")
    numeros = [10, 20, 30, 40, 50]
    for num in numeros
        print(num)
    end
    
    // Test 4: Bucle for tradicional estilo C
    print("Test 4: For tradicional estilo C")
    for (i = 0; i < 5; i = i + 1)
        print(i)
    end
    
    // Test 5: Bucle for tradicional con múltiples operaciones
    print("Test 5: For tradicional con múltiples operaciones")
    for (i = 0, sum = 0; i < 5; i = i + 1, sum = sum + i)
        print("Iteración " + i + ", suma = " + sum)
    end
    
    // Test 6: Bucles for anidados
    print("Test 6: Bucles for anidados")
    for i in range(1, 4)
        for j in range(1, 4)
            print("i = " + i + ", j = " + j)
        end
    end
    
    // Test 7: Bucle for con colección de strings
    print("Test 7: For con colección de strings")
    nombres = ["Ana", "Luis", "María", "Carlos"]
    for nombre in nombres
        print("Hola, " + nombre)
    end
    
    // Test 8: For tradicional con partes opcionales
    print("Test 8: For tradicional con condición solamente")
    j = 0
    for (; j < 3; j = j + 1)
        print("j = " + j)
    end
    
    print("Pruebas de bucles for completadas")
end