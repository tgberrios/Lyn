// ************************************************************************
// * Type System Testing Script for Lyn Language
// ************************************************************************

func sayHello()
    print("Hello from sayHello function!")
end

main
    // ===================================================================
    // Variables and Type Tests
    // ===================================================================
    
    // Basic variable assignments
    entero = 42               // Integer value
    decimal = 3.14            // Floating point value
    texto = "Hola, Lyn!"      // String value
    
    // Print variable values
    print("\n=== Variables and their values ===")
    print("entero = ")
    print(entero)
    print("decimal = ")
    print(decimal)
    print("texto = ")
    print(texto)
    
    // ===================================================================
    // Type System Tests
    // ===================================================================
    
    print("\n=== Type System Tests ===")
    
    // Type inference tests
    print("\n--- Type Inference ---")
    
    // Explicit type declarations
    explicit_int: int = 42
    explicit_float: float = 3.14
    
    // Inferred types
    inferred_int = 100        // Should infer as int
    inferred_float = 2.718    // Should infer as float
    inferred_string = "Hello type system"  // Should infer as string
    
    print("Values with explicit types:")
    print("explicit_int: ")
    print(explicit_int)
    print("explicit_float: ")
    print(explicit_float)
    
    print("Values with inferred types:")
    print("inferred_int: ")
    print(inferred_int)
    print("inferred_float: ")
    print(inferred_float)
    print("inferred_string: ")
    print(inferred_string)
    
    // Type compatibility tests
    print("\n--- Type Compatibility ---")
    
    // Valid assignments (compatible types)
    int_to_int = entero       // int to int (same type)
    int_to_float = entero     // int to float (int can be assigned to float)
    
    print("int_to_int: ")
    print(int_to_int)
    print("int_to_float: ")
    print(int_to_float)
    
    // Mixed type operations
    print("\n--- Mixed Type Operations ---")
    
    // Integer operations
    sum_int = entero + 10
    print("entero + 10 = ")
    print(sum_int)
    
    // Float operations
    product_float = decimal * 2
    print("decimal * 2 = ")
    print(product_float)
    
    // Mixed int and float (should promote to float)
    mixed_result = entero + decimal
    print("entero + decimal = ")
    print(mixed_result)
    
    // Simple variables without string concatenation
    greeting = "Hello World"  // Direct string assignment without concatenation
    message = "The answer is 42"
    
    // Avoid string concatenation in print statements
    print("String value: ")
    print(greeting)
    
    // Integer concatenation with strings
    num = 42
    message = "The answer is: " + num
    print(message)
    
    // ===================================================================
    // Function Type Tests
    // ===================================================================
    
    print("\n=== Function Type Tests ===")
    
    // Function with explicit return type - simplified
    func add(a: int, b: int) -> int
        return a + b;
    end
    
    // Function that works with strings - simplified
    func greet(name: string) -> string
        return "Hello, " + name;  // Keep the full greeting
    end
    
    // Test function calls with correct argument types
    sum_result = add(5, 3)
    print("add(5, 3) = ")
    print(sum_result)
    
    greeting_result = greet("World")
    print("greet result: ")
    print(greeting_result)
    
    // ===================================================================
    // Arithmetic Operations
    // ===================================================================
    
    print("\n=== Arithmetic operations ===")
    
    // Addition
    suma = 5 + 3
    print("5 + 3 = ")
    print(suma)
    
    // Subtraction
    resta = 10 - 4
    print("10 - 4 = ")
    print(resta)
    
    // Multiplication
    producto = 3 * 7
    print("3 * 7 = ")
    print(producto)
    
    // Division
    division = 20 / 4
    print("20 / 4 = ")
    print(division)
    
    // ===================================================================
    // Control Flow
    // ===================================================================
    
    print("\n=== Control flow statements ===")
    
    // If-else statement
    valor = 42
    
    if (valor > 10)
        print("valor is greater than 10")
    else
        print("valor is less than or equal to 10")
    end
    
    // Another if-else with a different condition
    edad = 25
    if (edad >= 18)
        print("You are an adult")
    else
        print("You are not yet an adult")
    end
    
    // ===================================================================
    // While Loop Test
    // ===================================================================
    
    print("\n=== While loop test ===")
    
    count = 1
    print("Counting from 1 to 5 using while:")
    
    while (count <= 5)
        print(count)
        count = count + 1
    end
    
    // ===================================================================
    // Do-While Loop Test
    // ===================================================================
    
    print("\n=== Do-While loop test ===")
    
    do_while_count = 1
    print("Counting from 1 to 5 using do-while:")
    
    do
        print(do_while_count)
        do_while_count = do_while_count + 1
    while (do_while_count <= 5)
    end
    
    // ===================================================================
    // Aspect-Oriented Programming Test
    // ===================================================================
    
    print("\n=== Simple aspect test ===")
    
    // Define a simple aspect
    aspect LoggingAspect
        // Define a pointcut for functions to log
        pointcut loggedFunctions "test_*"
        
        // Before advice to print message before function execution
        advice before loggedFunctions
            print("Before executing function")
        end
        
        // After advice to print message after function execution
        advice after loggedFunctions
            print("After executing function")
        end
    end
    
    // Define a function that will be advised by the aspect
    func test_function()
        print("Inside test_function")
    end
    
    // Explicitly call the function to activate the aspect
    print("Calling advised function:")
    test_function()  // Make sure this is actually calling the function
    
    // ===================================================================
    // Class and Object Test
    // ===================================================================
    
    print("\n=== Class and Object Test ===")
    
    class Car;
        brand = "Toyota"
        print("Creating a Car with brand = " + brand)
    end

    var myCar = new Car()
    print("Car instance created.")
    print("My car brand is: " + myCar.brand)  // Use myCar to prevent unused warning
    
    // ===================================================================
    // Additional Type System Tests
    // ===================================================================
    
    print("\n=== Advanced Type System Tests ===")
    
    // Boolean operations
    bool_val1 = true
    bool_val2 = false
    
    bool_and = bool_val1 and bool_val2
    print("true and false = ")
    print(bool_and)
    
    bool_or = bool_val1 or bool_val2
    print("true or false = ")
    print(bool_or)
    
    // Comparison operations (returning boolean)
    is_greater = 10 > 5
    print("10 > 5 = ")
    print(is_greater)
    
    is_equal = 7 == 7
    print("7 == 7 = ")
    print(is_equal)
    
    // Type conversions
    int_val = 42
    float_val = 3.14
    
    // Automatic conversion from int to float in mixed expression
    mixed_expr = int_val + float_val
    print("int_val + float_val = ")
    print(mixed_expr)
    
    // String concatenation with numeric conversion
    str_numeric = "The answer is: " + int_val
    print(str_numeric)
    
    sayHello()
    
    print("\n=== Test completed successfully! ===")
end
